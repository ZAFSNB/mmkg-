#Задание 1
import matplotlib.pyplot as plt
import numpy as np

def is_convex(points):
    # 函数用于判断多边形是否为凸多边形
    def cross_product(o, a, b):
        return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0])
    
    points = points + [points[0]]  # 闭合多边形
    signs = []
    for i in range(len(points) - 2):
        cross_prod = cross_product(points[i], points[i+1], points[i+2])
        signs.append(np.sign(cross_prod))
    return all(s == signs[0] for s in signs)

def is_self_intersecting(points):
    # 函数用于判断多边形是否自交
    # 这里使用简单的方法，对于复杂多边形可能需要更复杂的算法
    lines = [(points[i], points[(i + 1) % len(points)]) for i in range(len(points))]
    for i, line1 in enumerate(lines):
        for j, line2 in enumerate(lines):
            if i != j:
                # 检查线段是否相交
                pass  # 这里应该有线段相交的检查代码
    return False  # 如果没有发现相交，返回False

def draw_polygon(points):
    # 函数用于绘制多边形
    fig, ax = plt.subplots()
    polygon = plt.Polygon(points, fill=None, edgecolor='r')
    ax.add_patch(polygon)
    plt.xlim(-10, 10)
    plt.ylim(-10, 10)
    plt.grid(True)
    plt.show()

# 定义多边形的顶点
points = [(5, -5), (2, 4), (-1, 1), (-2, 5), (-4, -5)]

# 判断多边形是否为凸多边形
convex = is_convex(points)
print(f"多边形是凸的: {convex}")

# 判断多边形是否自交
self_intersecting = is_self_intersecting(points)
print(f"多边形是自交的: {self_intersecting}")

# 绘制多边形
draw_polygon(points)



#Задание 2
import matplotlib.pyplot as plt
from matplotlib.path import Path
import matplotlib.patches as patches

def is_point_inside_polygon(polygon, point):
    # 创建一个matplotlib的Path对象
    path = Path(polygon)
    return path.contains_point(point)

def draw_polygon_with_points(polygon, points):
    # 绘制多边形和点
    fig, ax = plt.subplots()
    # 绘制多边形
    patch = patches.Polygon(polygon, closed=True, fill=False, edgecolor='blue', linewidth=2)
    ax.add_patch(patch)
    # 标记点
    for point in points:
        inside = is_point_inside_polygon(polygon, point)
        color = 'green' if inside else 'red'
        plt.plot(*point, marker='o', color=color, label=f'Point {point} is inside' if inside else f'Point {point} is outside')
    # 设置图表参数
    plt.xlim(min(polygon, key=lambda x: x[0])[0] - 1, max(polygon, key=lambda x: x[0])[0] + 1)
    plt.ylim(min(polygon, key=lambda x: x[1])[1] - 1, max(polygon, key=lambda x: x[1])[1] + 1)
    plt.grid(True)
    plt.show()

# 定义多边形的顶点
polygon_points = [(3, 1), (1, 3), (-1, 1), (-2, -3), (1, -4), (3, -2)]
# 定义要检查的点
points_to_check = [(1, -1), (-1, 2)]

# 绘制多边形和点
draw_polygon_with_points(polygon_points, points_to_check)
